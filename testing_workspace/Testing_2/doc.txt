specifications:
PORT -> defines the port on which the server will listen for incoming connections
example : 8888

HOST -> defines the host on which the server will listen for incoming connections
example : 10.10.3.4

inbound:
    -> it is nothing but the server which will listen for incoming connections
    -> it will be a TCP server(socket) which will listen for incoming connections
    -> uses the start_server() in asyncio to start the server

    -> it will recieve when any of the node tries to send some message to it
    -> types of data recieving
        -> simple verification
        -> data to be stored(chunked file)
    -> it might respond back simple verification or it might store the data too (file that is distributed across the network)

outbound:
    -> it is the client which will try to connect to the server of the other node to send the data
    -> it will be a TCP client(socket) which will try to connect to the server of the other node
    -> uses the open_connection() in asyncio to connect to the server of the other node

    -> it will send the data to the other node
    -> types of data sending
        -> simple verification
        -> data to be stored(chunked file)
    -> it might recieve the response back from the other node(like success or failure)


------------------------------------------------------------------------------------------------------------------------

# process of how the file and the consensus is handled.

-> consider a clinet node uploads a file. the system itself chunks the data and make a index table for which node which data is beeing sent to
-> then after that each node will be sent the chunked file to the peer(outbound transfer).
-> then the after storing after the whole communication and the file will be locked in that system using the cryprography
-> after everything is done when the system got whole responses back stating that every file is transfered to other nodes then...
    this table also traversed over the network for full verification by the node in the network
-> once everything is done the meta data is sent to the staker
-> the staker will that meta data to the blockchain
-> this way whole network will be updated with the new file and the new file will be available to the network.
